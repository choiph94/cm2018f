%% Parameters

h = 6.626176e-34; % Planck constant, J s
hbar = h/(2*pi); % Reduced Planck constant, J s
q = 1.602192e-19; % Elementary charge, C
m0 = 9.109534e-31; % Electron rest mass, kg
k_B = 1.380662e-23; % Boltzmann constant, J/K
eps0 = 8.854187817e-12; % Vacuum permittivity, F/m
T = 300.0; % Temperature, K
thermal = k_B*T/q; % Thermal voltage, V

Lx = 100e-9; Ly=100e-9; Lz = 5e-9; % Lengths, m
mxx = 0.19; myy = 0.19; mzz= 0.91; % Masses, m0
Deltaz = 0.1e-9; % 0.1 nm spacing
Nz = 61; % 6 nm thick
z = Deltaz*transpose([0:Nz-1]); % real space, m
interface1 = 6; %At z = 0.5 nm
interface2 = 56; % At z = 5.5 nm
eps_si = 11.7; eps_ox = 3.9; % Relative permittivity
Nacc = 1e24; % 1e18 / cm^3
ni = 1.075e16; % 1.075e10 / cm^3
coef_Poi = Deltaz*Deltaz*q/eps0;

Ec_Ei = 0.561004; % E_c - E_i, eV

%% Boundary conditions

res = zeros(Nz,1);
Jaco = sparse(Nz,Nz);
Jaco(1,1) = 1.0;
Jaco(Nz,Nz) = 1.0;
phi = zeros(Nz,101);
V = zeros(Nz,101);

Nbulk = interface2 - interface1 - 1; % Number of bulk silion nodes
Hamil = zeros (Nbulk, Nbulk);
nsubband = 10;
elec_Poi = zeros(Nz,101);
elec_Sch = zeros(Nz,101);

elec = zeros(Nz,101);
totalNumber = 0;


%% Newton Method

for j = 1:101
    phi(1,j) = 0.33374+(j-1)/100;
    phi(Nz,j) = 0.33374+(j-1)/100;
    Jaco(1,1) = 1.0;
    Jaco(Nz,Nz) = 1.0;
    res(1,1) = phi(1,j)-(0.33374+((j-1)/100));
    res(Nz,1) = res(1,1);
    
    for newton = 1:100
         for ii= 2:Nz-1
             if(ii< interface1 || ii> interface2)
                res(ii,1) = eps_ox*phi(ii+1,j) - 2*eps_ox*phi(ii,j) + eps_ox*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_ox; Jaco(ii,ii) = -2*eps_ox; Jaco (ii,ii+1) = eps_ox;
             elseif(ii==interface1)
                res(ii,1) = eps_si*phi(ii+1,j) - (eps_si+eps_ox)*phi(ii,j) + eps_ox*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_ox; Jaco(ii,ii) = -(eps_si+eps_ox); Jaco(ii,ii+1) = eps_si;                  
             elseif(ii==interface2)
                res(ii,1) = eps_ox*phi(ii+1,j) - (eps_ox+eps_si)*phi(ii,j) + eps_si*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_si; Jaco(ii,ii) = -(eps_ox+eps_si); Jaco(ii,ii+1) = eps_ox;
             else
                res(ii,1) = eps_si*phi(ii+1,j) - 2*eps_si*phi(ii,j) + eps_si*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_si; Jaco(ii,ii) = -2*eps_si; Jaco(ii,ii+1) = eps_si;
             end
         end
         
        for ii=interface1:interface2
            if (ii==interface1)
                res(ii,1) = res(ii,1) - coef_Poi*(Nacc+ni*exp(phi(ii,j)/thermal))*0.5;
                Jaco(ii,ii) = Jaco(ii,ii) - coef_Poi*ni*exp(phi(ii,j)/thermal)/thermal*0.5;
            elseif(ii==interface2)
                res(ii,1) = res(ii,1) - coef_Poi*(Nacc+ni*exp(phi(ii,j)/thermal))*0.5;
                Jaco(ii,ii) = Jaco(ii,ii) - coef_Poi*ni*exp(phi(ii,j)/thermal)/thermal*0.5;
            else
                res(ii,1) = res(ii,1) - coef_Poi*(Nacc+ni*exp(phi(ii,j)/thermal));
                Jaco(ii,ii) = Jaco(ii,ii) - coef_Poi*ni*exp(phi(ii,j)/thermal)/thermal;
            end
        end
        update = Jaco\(-res);
        phi(:,j) = phi(:,j) + update;
    end
    for ii=interface1:interface2
        elec_Poi(ii,j) = ni*exp(q*phi(ii,j)/(k_B*T));
    end
    
   %% Schrodinger solver
   for iNewton = 1:20

       for iValley = 1:3
           mass = ones(3)*0.19;
           mass(iValley) = 0.91;
           coef_Sch = 2*Lx*Ly/(2*pi)*sqrt(mass(1)*mass(2))*m0/(hbar^2)*(k_B*T);
           V (:,j)= q*Ec_Ei - q*phi(:,j); % Potential energy, J
           Nbulk = interface2-interface1-1; % Number of bulk silicon nodes
           Hamil(1,1) = -2; Hamil(1,2) = 1;
           for ii = 2:Nbulk-1
               Hamil(ii,ii+1) =  1;
               Hamil(ii,ii  ) = -2;
               Hamil(ii,ii-1) =  1;
           end
    
           Hamil(Nbulk,Nbulk) = -2; Hamil(Nbulk,Nbulk-1) = 1;
           for ii = 1:Nbulk
               Hamil(ii,ii) = Hamil(ii,ii) - 2*mass(3)*m0*(Deltaz/hbar)^2*V(ii+interface1,j);
           end
           [eigenvectors, eigenvalues] = eig(Hamil);
           scaledEz = diag(eigenvalues)/(-2*mass(3)*m0*(Deltaz/hbar)^2); % Eigenenergy, J
           [sortedEz, sortedIndex] = sort(scaledEz);
           for n = 1:nsubband
               Ez = sortedEz(n,1);
               wavefunction2 = eigenvectors(:,sortedIndex(n)).^2;
               normalization = sum(wavefunction2)*Deltaz;
               wavefunction2 = wavefunction2/normalization;
               subbandNumber = coef_Sch*log(1+exp(-Ez/(k_B*T)));
               totalNumber = totalNumber + subbandNumber;
               elec(interface1+1:interface2-1,j) = elec(interface1+1:interface2-1,j) + 1/(Lx*Ly)*wavefunction2*subbandNumber;
               elec_Sch=2*elec;
           end
       end
       for ii= 2:Nz-1
             if(ii< interface1 || ii> interface2)
                res(ii,1) = eps_ox*phi(ii+1,j) - 2*eps_ox*phi(ii,j) + eps_ox*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_ox; Jaco(ii,ii) = -2*eps_ox; Jaco (ii,ii+1) = eps_ox;
             elseif(ii==interface1)
                res(ii,1) = eps_si*phi(ii+1,j) - (eps_si+eps_ox)*phi(ii,j) + eps_ox*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_ox; Jaco(ii,ii) = -(eps_si+eps_ox); Jaco(ii,ii+1) = eps_si;                  
             elseif(ii==interface2)
                res(ii,1) = eps_ox*phi(ii+1,j) - (eps_ox+eps_si)*phi(ii,j) + eps_si*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_si; Jaco(ii,ii) = -(eps_ox+eps_si); Jaco(ii,ii+1) = eps_ox;
             else
                res(ii,1) = eps_si*phi(ii+1,j) - 2*eps_si*phi(ii,j) + eps_si*phi(ii-1,j);
                Jaco(ii,ii-1) = eps_si; Jaco(ii,ii) = -2*eps_si; Jaco(ii,ii+1) = eps_si;
             end
         end
         
        for ii=interface1:interface2
            if (ii==interface1)
                res(ii,1) = res(ii,1) - coef_Poi*(Nacc+elec_Sch(ii,j))*0.5;
                Jaco(ii,ii) = Jaco(ii,ii) - coef_Poi*elec_Sch(ii,j)/thermal*0.5;
            elseif(ii==interface2)
                res(ii,1) = res(ii,1) - coef_Poi*(Nacc+elec_Sch(ii,j))*0.5;
                Jaco(ii,ii) = Jaco(ii,ii) - coef_Poi*elec_Sch(ii,j)/thermal*0.5;
            else
                res(ii,1) = res(ii,1) - coef_Poi*(Nacc+elec_Sch(ii,j));
                Jaco(ii,ii) = Jaco(ii,ii) - coef_Poi*elec_Sch(ii,j)/thermal;
            end
        end
        update = Jaco\(-res);
        phi(:,j) = phi(:,j) + update;
   end

    for ii=interface1:interface2
        elec_Sch(ii,j) = ni*exp(q*phi(ii,j)/(k_B*T));
    end
end

%% electron density
int_elec_Poi = zeros(Nz,1);
int_elec_Sch = zeros(Nz,1);
for j = 1:101
    int_elec_Poi(j) = sum(elec_Poi(:,j)) * Deltaz;
    int_elec_Sch(j) = sum(elec_Sch(:,j)) * Deltaz;
end

Gate_V = zeros(101,1);
for j=1:101;
    Gate_V(j) = (j-1)/100;
end


%% Plot

for j = 1:11
    figure(1)
    semilogy(z/1e-9,elec_Poi(:,10*j-9)/1e6)
    hold all;
end
legend('0 V','0.1 V','0.2 V','0.3 V','0.4 V','0.5 V','0.6 V','0.7 V','0.8 V','0.9 V','1.0 V');
title('Electron density (Poission)');
xlabel('z (nm)');
ylabel('electron density (cm^-^3)');


for j = 1:11
    figure(2)
    semilogy(z/1e-9,elec_Sch(:,10*j-9)/1e6)
    hold all;
end
legend('0 V','0.1 V','0.2 V','0.3 V','0.4 V','0.5 V','0.6 V','0.7 V','0.8 V','0.9 V','1.0 V');
title('Electron density (Poission+Schr)');
xlabel('z (nm)');
ylabel('electron density (cm^-^3)');


figure(3)
semilogy(Gate_V,int_elec_Poi/1e4)
hold on
semilogy(Gate_V,int_elec_Sch/1e4,'k')
xlabel('Gate Voltage (V)');
ylabel('Integrated electron density (cm^-^2)');
legend('Poi','Poi+Schr')
